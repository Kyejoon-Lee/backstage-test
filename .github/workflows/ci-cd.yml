name: CI & CD dev
run-name: CI/CD - dev

on:
  push:
    branches: [ "main" ]
    paths:
      - 'charts/**/starter/**'  # starter 디렉토리 관련 변경사항만
      - 'charts/**/Chart.yaml'  # 새로운 차트의 Chart.yaml 추가

# 동시성 제어: 커밋 SHA별로 그룹화하여 같은 커밋에서 발생한 변경사항만 순차 처리
concurrency:
  group: helm-operations-${{ github.sha }}
  cancel-in-progress: false  # 진행 중인 작업을 취소하지 않고 대기

jobs:
  helm-operations:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 전체 히스토리를 가져와서 변경사항 감지

    - name: Check commit message
      id: check-commit
      run: |
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        echo "Commit message: $COMMIT_MSG"
        
        # 커밋 메시지에 delete, remove, cleanup 등이 포함되어 있으면 중단
        if echo "$COMMIT_MSG" | grep -qi -E "(delete|remove|cleanup|clean|rm)"; then
          echo "Commit message contains deletion keywords. Skipping workflow."
          echo "skip_workflow=true" >> $GITHUB_OUTPUT
        else
          echo "Commit message does not contain deletion keywords. Proceeding."
          echo "skip_workflow=false" >> $GITHUB_OUTPUT
        fi

    - name: Install Helm
      if: steps.check-commit.outputs.skip_workflow != 'true'
      run: |
        curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
        sudo apt-get install apt-transport-https --yes
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
        sudo apt-get update
        sudo apt-get install helm

    - name: Verify Helm installation
      if: steps.check-commit.outputs.skip_workflow != 'true'
      run: helm version

    - name: Detect new charts
      if: steps.check-commit.outputs.skip_workflow != 'true'
      id: detect-charts
      run: |
        # 새롭게 추가된 charts/{name}/{env}/{version} 디렉토리 감지 (환경은 가변적)
        BASE_SHA="${{ github.event.before }}"
        
        # Git diff로 새로 추가된 charts 디렉토리 찾기 (환경 이름은 가변적)
        NEW_CHARTS=$(git diff --name-only --diff-filter=A $BASE_SHA HEAD | grep -E '^charts/[^/]+/[^/]+/[^/]+/' | cut -d'/' -f1-4 | sort -u || true)
        
        echo "Detected new charts:"
        echo "$NEW_CHARTS"
        
        # 결과를 환경 변수로 저장
        echo "NEW_CHARTS<<EOF" >> $GITHUB_OUTPUT
        echo "$NEW_CHARTS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Process and commit charts individually
      if: steps.detect-charts.outputs.NEW_CHARTS != '' && steps.check-commit.outputs.skip_workflow != 'true'
      run: |
        echo "Processing new charts individually..."
        
        # 새로 감지된 각 차트에 대해 개별적으로 처리
        while IFS= read -r chart_path; do
          if [ -n "$chart_path" ]; then
            echo "Processing: $chart_path"
            
            # charts/{name}/{env}/{version} 경로에서 name, env, version 추출
            name=$(echo "$chart_path" | cut -d'/' -f2)
            env=$(echo "$chart_path" | cut -d'/' -f3)
            version=$(echo "$chart_path" | cut -d'/' -f4)
            
            echo "Chart name: $name, Environment: $env, Version: $version"
            
            # 최신 변경사항을 가져와서 충돌 방지
            git fetch origin main
            git reset --hard origin/main
            
            # 1. charts/{name}/{env}/{version} 디렉토리로 이동하여 helm create 실행
            cd "$chart_path"
            
            # starter 디렉토리가 있는지 확인하고 helm create 실행
            if [ -d "./starter" ]; then
              echo "Creating chart using local starter directory"
              STARTER_PATH=$(pwd)/starter
              helm create --starter "$STARTER_PATH" "$name"
              
              # starter 디렉토리 삭제
              echo "Removing starter directory..."
              rm -rf "./starter"
            else
              echo "No starter directory found, creating default chart"
              helm create "$name"
            fi
            
            # Chart.yaml의 version과 appVersion을 디렉토리 버전으로 업데이트
            cd "$name"
            if [ -f "Chart.yaml" ]; then
              echo "Updating Chart.yaml with version: $version"
              
              # version과 appVersion을 디렉토리의 버전으로 업데이트
              sed -i.bak "s/^version:.*/version: $version/" Chart.yaml
              sed -i.bak "s/^appVersion:.*/appVersion: \"$version\"/" Chart.yaml
              
              # 백업 파일 삭제
              rm -f Chart.yaml.bak
              
              echo "Chart.yaml updated successfully"
              cat Chart.yaml | grep -E "(version|appVersion):"
            else
              echo "Warning: Chart.yaml not found in $name directory"
            fi
            
            # 2. charts/{name}/{env}/{version}/{name} 안에서 helm lint 실행
            echo "Running helm lint for $name..."
            helm lint . --values override-values.yaml
            
            # 3. helm dependency build, package, repo index 실행
            echo "Building dependencies, packaging, and indexing..."
            helm dependency build ./
            helm package ./
            helm repo index ./
            
            echo "Completed processing for $name in $env environment"
            cd "$GITHUB_WORKSPACE"
            
            # 개별 차트 처리 후 즉시 커밋
            git add "$chart_path"
            if ! git diff --staged --quiet; then
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git commit -m "chore: process helm chart $name in $env environment (v$version)"
              
              # Push with retry logic for conflicts
              for i in {1..3}; do
                if git push origin main; then
                  echo "Successfully pushed changes for $name"
                  break
                else
                  echo "Push failed, attempt $i/3. Fetching latest changes..."
                  git fetch origin main
                  git rebase origin/main
                fi
              done
            fi
            
          fi
        done <<< "${{ steps.detect-charts.outputs.NEW_CHARTS }}"
